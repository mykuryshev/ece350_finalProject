// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2017 16:16:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CP4_processor_sj166
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CP4_processor_sj166_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
reg [18:0] vga_address;
// wires                                               
wire [11:0] dmem_address;
wire [31:0] dmem_data_in;
wire [31:0] dmem_out;
wire [7:0] vga_out;

// assign statements (if any)                          
CP4_processor_sj166 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dmem_address(dmem_address),
	.dmem_data_in(dmem_data_in),
	.dmem_out(dmem_out),
	.reset(reset),
	.vga_address(vga_address),
	.vga_out(vga_out)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// vga_address[ 18 ]
initial
begin
	vga_address[18] = 1'b0;
end 
// vga_address[ 17 ]
initial
begin
	vga_address[17] = 1'b0;
end 
// vga_address[ 16 ]
initial
begin
	vga_address[16] = 1'b0;
end 
// vga_address[ 15 ]
initial
begin
	vga_address[15] = 1'b0;
end 
// vga_address[ 14 ]
initial
begin
	vga_address[14] = 1'b0;
end 
// vga_address[ 13 ]
initial
begin
	vga_address[13] = 1'b0;
	vga_address[13] = #380000 1'b1;
	vga_address[13] = #150000 1'b0;
end 
// vga_address[ 12 ]
initial
begin
	vga_address[12] = 1'b0;
	vga_address[12] = #380000 1'b1;
	vga_address[12] = #150000 1'b0;
end 
// vga_address[ 11 ]
initial
begin
	vga_address[11] = 1'b0;
	vga_address[11] = #530000 1'b1;
	vga_address[11] = #10000 1'b0;
end 
// vga_address[ 10 ]
initial
begin
	vga_address[10] = 1'b0;
	vga_address[10] = #530000 1'b1;
	vga_address[10] = #10000 1'b0;
end 
// vga_address[ 9 ]
initial
begin
	vga_address[9] = 1'b0;
	vga_address[9] = #380000 1'b1;
	vga_address[9] = #150000 1'b0;
end 
// vga_address[ 8 ]
initial
begin
	vga_address[8] = 1'b0;
	vga_address[8] = #380000 1'b1;
	vga_address[8] = #160000 1'b0;
end 
// vga_address[ 7 ]
initial
begin
	vga_address[7] = 1'b0;
	vga_address[7] = #380000 1'b1;
	vga_address[7] = #150000 1'b0;
end 
// vga_address[ 6 ]
initial
begin
	vga_address[6] = 1'b0;
end 
// vga_address[ 5 ]
initial
begin
	vga_address[5] = 1'b0;
	vga_address[5] = #530000 1'b1;
	vga_address[5] = #10000 1'b0;
end 
// vga_address[ 4 ]
initial
begin
	vga_address[4] = 1'b0;
	vga_address[4] = #380000 1'b1;
	vga_address[4] = #160000 1'b0;
end 
// vga_address[ 3 ]
initial
begin
	vga_address[3] = 1'b0;
	vga_address[3] = #530000 1'b1;
	vga_address[3] = #10000 1'b0;
end 
// vga_address[ 2 ]
initial
begin
	vga_address[2] = 1'b0;
	vga_address[2] = #530000 1'b1;
	vga_address[2] = #10000 1'b0;
end 
// vga_address[ 1 ]
initial
begin
	vga_address[1] = 1'b0;
	vga_address[1] = #530000 1'b1;
	vga_address[1] = #10000 1'b0;
end 
// vga_address[ 0 ]
initial
begin
	vga_address[0] = 1'b0;
end 
endmodule

