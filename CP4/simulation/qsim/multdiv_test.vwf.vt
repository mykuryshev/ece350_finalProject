// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/02/2017 15:50:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CP4_processor_sj166
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CP4_processor_sj166_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [31:0] PC_out;
wire [5:0] counter_outputs;
wire [31:0] div_out;
wire [11:0] dmem_address;
wire [31:0] dmem_data_in;
wire [31:0] dmem_out;
wire flush;
wire [31:0] imem_out;
wire [31:0] mult_out;
wire [31:0] multdiv_A;
wire [31:0] multdiv_B;
wire [31:0] multdiv_addr_out;
wire multdiv_ready;
wire [31:0] multdiv_reset;
wire [31:0] multdiv_result;
wire [4:0] opcode_W;
wire [31:0] rd_writedata;
wire [4:0] regfile_write_addr;
wire regfile_write_enable;
wire rs_write;
wire [31:0] rs_writeData;
wire sw_M;
wire take_bex;
wire x_div;
wire x_mult;

// assign statements (if any)                          
CP4_processor_sj166 i1 (
// port map - connection between master ports and signals/registers   
	.PC_out(PC_out),
	.clock(clock),
	.counter_outputs(counter_outputs),
	.div_out(div_out),
	.dmem_address(dmem_address),
	.dmem_data_in(dmem_data_in),
	.dmem_out(dmem_out),
	.flush(flush),
	.imem_out(imem_out),
	.mult_out(mult_out),
	.multdiv_A(multdiv_A),
	.multdiv_B(multdiv_B),
	.multdiv_addr_out(multdiv_addr_out),
	.multdiv_ready(multdiv_ready),
	.multdiv_reset(multdiv_reset),
	.multdiv_result(multdiv_result),
	.opcode_W(opcode_W),
	.rd_writedata(rd_writedata),
	.regfile_write_addr(regfile_write_addr),
	.regfile_write_enable(regfile_write_enable),
	.reset(reset),
	.rs_write(rs_write),
	.rs_writeData(rs_writeData),
	.sw_M(sw_M),
	.take_bex(take_bex),
	.x_div(x_div),
	.x_mult(x_mult)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

