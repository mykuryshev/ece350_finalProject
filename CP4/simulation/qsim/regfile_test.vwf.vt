// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/02/2017 00:17:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          regfile_mod
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regfile_mod_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [4:0] ctrl_readRegA;
reg [4:0] ctrl_readRegB;
reg ctrl_reset;
reg ctrl_writeEnable;
reg [4:0] ctrl_writeReg;
reg [31:0] data_writeReg;
reg rs_write;
reg [31:0] rs_writeData;
// wires                                               
wire [31:0] data_readRegA;
wire [31:0] data_readRegB;

// assign statements (if any)                          
regfile_mod i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.ctrl_readRegA(ctrl_readRegA),
	.ctrl_readRegB(ctrl_readRegB),
	.ctrl_reset(ctrl_reset),
	.ctrl_writeEnable(ctrl_writeEnable),
	.ctrl_writeReg(ctrl_writeReg),
	.data_readRegA(data_readRegA),
	.data_readRegB(data_readRegB),
	.data_writeReg(data_writeReg),
	.rs_write(rs_write),
	.rs_writeData(rs_writeData)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// ctrl_readRegA[ 4 ]
initial
begin
	ctrl_readRegA[4] = 1'b1;
end 
// ctrl_readRegA[ 3 ]
initial
begin
	ctrl_readRegA[3] = 1'b1;
end 
// ctrl_readRegA[ 2 ]
initial
begin
	ctrl_readRegA[2] = 1'b1;
end 
// ctrl_readRegA[ 1 ]
initial
begin
	ctrl_readRegA[1] = 1'b1;
end 
// ctrl_readRegA[ 0 ]
initial
begin
	ctrl_readRegA[0] = 1'b0;
end 
// ctrl_readRegB[ 4 ]
initial
begin
	ctrl_readRegB[4] = 1'b0;
end 
// ctrl_readRegB[ 3 ]
initial
begin
	ctrl_readRegB[3] = 1'b0;
end 
// ctrl_readRegB[ 2 ]
initial
begin
	ctrl_readRegB[2] = 1'b0;
end 
// ctrl_readRegB[ 1 ]
initial
begin
	ctrl_readRegB[1] = 1'b0;
end 
// ctrl_readRegB[ 0 ]
initial
begin
	ctrl_readRegB[0] = 1'b0;
end 

// ctrl_reset
initial
begin
	ctrl_reset = 1'b0;
end 

// ctrl_writeEnable
initial
begin
	ctrl_writeEnable = 1'b0;
end 
// ctrl_writeReg[ 4 ]
initial
begin
	ctrl_writeReg[4] = 1'b0;
end 
// ctrl_writeReg[ 3 ]
initial
begin
	ctrl_writeReg[3] = 1'b0;
end 
// ctrl_writeReg[ 2 ]
initial
begin
	ctrl_writeReg[2] = 1'b0;
end 
// ctrl_writeReg[ 1 ]
initial
begin
	ctrl_writeReg[1] = 1'b0;
end 
// ctrl_writeReg[ 0 ]
initial
begin
	ctrl_writeReg[0] = 1'b0;
end 
// data_writeReg[ 31 ]
initial
begin
	data_writeReg[31] = 1'b0;
end 
// data_writeReg[ 30 ]
initial
begin
	data_writeReg[30] = 1'b0;
end 
// data_writeReg[ 29 ]
initial
begin
	data_writeReg[29] = 1'b0;
end 
// data_writeReg[ 28 ]
initial
begin
	data_writeReg[28] = 1'b0;
end 
// data_writeReg[ 27 ]
initial
begin
	data_writeReg[27] = 1'b0;
end 
// data_writeReg[ 26 ]
initial
begin
	data_writeReg[26] = 1'b0;
end 
// data_writeReg[ 25 ]
initial
begin
	data_writeReg[25] = 1'b0;
end 
// data_writeReg[ 24 ]
initial
begin
	data_writeReg[24] = 1'b0;
end 
// data_writeReg[ 23 ]
initial
begin
	data_writeReg[23] = 1'b0;
end 
// data_writeReg[ 22 ]
initial
begin
	data_writeReg[22] = 1'b0;
end 
// data_writeReg[ 21 ]
initial
begin
	data_writeReg[21] = 1'b0;
end 
// data_writeReg[ 20 ]
initial
begin
	data_writeReg[20] = 1'b0;
end 
// data_writeReg[ 19 ]
initial
begin
	data_writeReg[19] = 1'b0;
end 
// data_writeReg[ 18 ]
initial
begin
	data_writeReg[18] = 1'b0;
end 
// data_writeReg[ 17 ]
initial
begin
	data_writeReg[17] = 1'b0;
end 
// data_writeReg[ 16 ]
initial
begin
	data_writeReg[16] = 1'b0;
end 
// data_writeReg[ 15 ]
initial
begin
	data_writeReg[15] = 1'b0;
end 
// data_writeReg[ 14 ]
initial
begin
	data_writeReg[14] = 1'b0;
end 
// data_writeReg[ 13 ]
initial
begin
	data_writeReg[13] = 1'b0;
end 
// data_writeReg[ 12 ]
initial
begin
	data_writeReg[12] = 1'b0;
end 
// data_writeReg[ 11 ]
initial
begin
	data_writeReg[11] = 1'b0;
end 
// data_writeReg[ 10 ]
initial
begin
	data_writeReg[10] = 1'b0;
end 
// data_writeReg[ 9 ]
initial
begin
	data_writeReg[9] = 1'b0;
end 
// data_writeReg[ 8 ]
initial
begin
	data_writeReg[8] = 1'b0;
end 
// data_writeReg[ 7 ]
initial
begin
	data_writeReg[7] = 1'b0;
end 
// data_writeReg[ 6 ]
initial
begin
	data_writeReg[6] = 1'b0;
end 
// data_writeReg[ 5 ]
initial
begin
	data_writeReg[5] = 1'b0;
end 
// data_writeReg[ 4 ]
initial
begin
	data_writeReg[4] = 1'b0;
end 
// data_writeReg[ 3 ]
initial
begin
	data_writeReg[3] = 1'b0;
end 
// data_writeReg[ 2 ]
initial
begin
	data_writeReg[2] = 1'b0;
end 
// data_writeReg[ 1 ]
initial
begin
	data_writeReg[1] = 1'b0;
end 
// data_writeReg[ 0 ]
initial
begin
	data_writeReg[0] = 1'b0;
end 

// rs_write
initial
begin
	rs_write = 1'b0;
	rs_write = #50000 1'b1;
	rs_write = #20000 1'b0;
end 
// rs_writeData[ 31 ]
initial
begin
	rs_writeData[31] = 1'b0;
end 
// rs_writeData[ 30 ]
initial
begin
	rs_writeData[30] = 1'b0;
end 
// rs_writeData[ 29 ]
initial
begin
	rs_writeData[29] = 1'b0;
end 
// rs_writeData[ 28 ]
initial
begin
	rs_writeData[28] = 1'b0;
end 
// rs_writeData[ 27 ]
initial
begin
	rs_writeData[27] = 1'b0;
end 
// rs_writeData[ 26 ]
initial
begin
	rs_writeData[26] = 1'b0;
end 
// rs_writeData[ 25 ]
initial
begin
	rs_writeData[25] = 1'b0;
end 
// rs_writeData[ 24 ]
initial
begin
	rs_writeData[24] = 1'b0;
end 
// rs_writeData[ 23 ]
initial
begin
	rs_writeData[23] = 1'b0;
end 
// rs_writeData[ 22 ]
initial
begin
	rs_writeData[22] = 1'b0;
end 
// rs_writeData[ 21 ]
initial
begin
	rs_writeData[21] = 1'b0;
end 
// rs_writeData[ 20 ]
initial
begin
	rs_writeData[20] = 1'b0;
end 
// rs_writeData[ 19 ]
initial
begin
	rs_writeData[19] = 1'b0;
end 
// rs_writeData[ 18 ]
initial
begin
	rs_writeData[18] = 1'b0;
end 
// rs_writeData[ 17 ]
initial
begin
	rs_writeData[17] = 1'b0;
end 
// rs_writeData[ 16 ]
initial
begin
	rs_writeData[16] = 1'b0;
end 
// rs_writeData[ 15 ]
initial
begin
	rs_writeData[15] = 1'b0;
end 
// rs_writeData[ 14 ]
initial
begin
	rs_writeData[14] = 1'b0;
end 
// rs_writeData[ 13 ]
initial
begin
	rs_writeData[13] = 1'b0;
end 
// rs_writeData[ 12 ]
initial
begin
	rs_writeData[12] = 1'b0;
end 
// rs_writeData[ 11 ]
initial
begin
	rs_writeData[11] = 1'b0;
end 
// rs_writeData[ 10 ]
initial
begin
	rs_writeData[10] = 1'b0;
end 
// rs_writeData[ 9 ]
initial
begin
	rs_writeData[9] = 1'b0;
end 
// rs_writeData[ 8 ]
initial
begin
	rs_writeData[8] = 1'b0;
end 
// rs_writeData[ 7 ]
initial
begin
	rs_writeData[7] = 1'b0;
end 
// rs_writeData[ 6 ]
initial
begin
	rs_writeData[6] = 1'b0;
end 
// rs_writeData[ 5 ]
initial
begin
	rs_writeData[5] = 1'b0;
end 
// rs_writeData[ 4 ]
initial
begin
	rs_writeData[4] = 1'b0;
end 
// rs_writeData[ 3 ]
initial
begin
	rs_writeData[3] = 1'b0;
end 
// rs_writeData[ 2 ]
initial
begin
	rs_writeData[2] = 1'b0;
end 
// rs_writeData[ 1 ]
initial
begin
	rs_writeData[1] = 1'b0;
end 
// rs_writeData[ 0 ]
initial
begin
	rs_writeData[0] = 1'b0;
	rs_writeData[0] = #50000 1'b1;
	rs_writeData[0] = #20000 1'b0;
end 
endmodule

