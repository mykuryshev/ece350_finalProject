.text
main: 
addi $1, $0, 1 #This is block drawing
addi $5, $0, 0
addi $4, $0, 50
addi $6, $0, 0
addi $10, $0, 6500 #65000
sll $10, $10, 2 #around 1 million now
addi $9, $9, 0
addi $29,$0, 1
addi $11, $0, 1
j initArrowListInMem
noop
noop
noop
noop
noop

initArrowListInMem:
addi $25, $0, 10 #initial cycle to appear
addi $26, $0, 1 #arrow type
addi $27, $0, 38000 #arrow bot location, not really needed but had it here
sw $25, 400($0)
sw $26, 401($0)
sw $27, 402($0)
addi $25, $0, 40
addi $26, $0, 2
addi $27, $0, 38100
sw $25, 406($0)
sw $26, 407($0)
sw $27, 408($0)
addi $25, $0, 110
addi $26, $0, 1
addi $27, $0, 38000
sw $25, 412($0)
sw $26, 413($0)
sw $27, 414($0)
addi $25, $0, 165
addi $26, $0, 3
addi $27, $0, 38200
sw $25, 418($0)
sw $26, 419($0)
sw $27, 420($0)
addi $25, $0, 205
addi $26, $0, 4
addi $27, $0, 38300
sw $25, 424($0)
sw $26, 425($0)
sw $27, 426($0)
addi $25, $0, 230
addi $26, $0, 2
addi $27, $0, 38100

addi $28, $0, 0 #will store scan code for valid key inputs #key codes stored in memory 800-899, 800 left, 801 up, 802 right, 803 down
addi $16, $0, 107 #left
sw $16, 800($0)
addi $16, $0, 117 #up
sw $16, 801($0)
addi $16, $0, 116 #right
sw $16, 802($0)
addi $16, $0, 114 #down
sw $16, 803($0)
addi $16, $0, 0
addi $16, $0, 0 
sw $16, 900($0) #store score
j beginning
noop
noop
noop
noop
noop

beginning:
addi $18, $0, 201
addi $19, $0, 221
j inLevel
noop
noop
noop
noop
noop

inLevel:
noop
noop
noop
noop
noop
jal genArrows
noop
noop
noop
noop
noop
addi $1, $0, 1 #not really needed
addi $15, $0, 1 #to draw
noop
noop
noop
noop
noop
jal sweepDraw #Draw real stuff
noop
noop
noop
noop
noop
addi $2, $0, 5800 # $2 is starting point for random block
noop
noop
noop
noop
noop 
jal stall #Chill
noop
noop
noop
noop 
noop
addi $15, $0, 0
noop
noop
noop
noop 
noop
jal sweepDraw #Erase
noop
noop
noop
noop
noop
bne $28, $0, skipstep 
noop
noop
noop
noop 
noop
jal checkInputsInLevel
noop
noop
noop
noop 
noop
skipstep:
noop
noop
noop
noop 
noop
jal moveArrows
noop
noop
noop
noop
noop
j inLevel
noop
noop
noop
noop
noop


draw: 
addi $5, $0, 0
addi $2, $3, -32000
noop
noop
noop
noop
noop
j drawLoop
noop
noop
noop
noop
noop


drawLoop:
noop
noop
noop
noop
noop
sw $1, 0($2)    
addi $2, $2, 1
addi $5, $5, 1
blt $5, $4, drawLoop
noop
noop 
noop
noop
noop
addi $2, $2, 590
addi $5, $5, -50
blt $2, $3, drawLoop
noop
noop
noop
noop
noop
bne $11, $0, endInputCheck
noop
noop
noop
noop
noop
j sweep
noop
noop
noop
noop
noop

stall: 
noop
noop
noop
noop
noop
addi $9, $9, 1
noop
noop
noop
noop
noop
blt $9, $10, stall
noop
noop
noop
noop
noop
addi $9, $0, 0
noop
noop
noop
noop
noop
addi $6, $6, 1 #global variable, likely better to place in memory
noop
noop
noop
noop
noop
jr $31
noop
noop
noop
noop
noop

checkInputsInLevel:
noop
noop
noop
noop
noop
lw $16, 800($0) #left
addi $17, $0, 1
bne $16, $28, checkToScore
noop
noop
noop
noop 
noop
lw $16, 801($0) #up
addi $17, $0, 2
bne $16, $28, checkToScore
noop
noop
noop
noop 
noop
lw $16, 802($0) #right
addi $17, $0, 3
bne $16, $28, checkToScore
noop
noop
noop
noop
noop
lw $16, 803($0) #down
addi $17, $0, 4
bne $16, $28, checkToScore
noop
noop
noop
noop
noop
j endInputCheck
noop
noop
noop
noop
noop


endInputCheck:
addi $11, $0, 1
addi $16, $0, 0
addi $28, $0, 0 #reset key input state of $28
jr $31
noop
noop
noop
noop
noop


checkToScore:
addi $18, $0, 199
addi $19, $0 ,300
addi $20, $0, 65000
addi $20, $20, 65000 #highest row allowing score
addi $21, $0, 65000
addi $21, $21, 65000
addi $21, $21, 65000 #lowest row allowing score
j scoreSweep
noop
noop
noop
noop
noop


scoreSweep:
addi $18, $18, 2
lw $25, 0($18)
lw $26, 1($18)
bne $25, $0, scoreSweep
noop
noop
noop
noop
noop
bne $17, $25, checkBounds
noop
noop
noop
noop
noop
blt $19, $18, endInputCheck
noop
noop
noop
noop
noop
j scoreSweep
noop
noop
noop
noop
noop


checkBounds:
blt $26, $20, scoreSweep #arrow too high, fails
noop
noop
noop
noop
noop
blt $21, $26, scoreSweep #arrow too low, late and fails
noop
noop
noop
noop
noop #lw $29, 900($0)
addi $29, $29, 1 #increase score by 100 or whatnot
sw $29, 900($0)
addi $11, $0, 0
addi $1, $0, 0
addi $3, $26, 0
sw $0, 0($18)
sw $0, 1($18)
noop
noop 
noop
noop
noop #addi $29, $0, 0
j draw
noop
noop
noop
noop
noop


end:
noop
noop 
noop
noop
noop
j end
noop
noop
noop
noop
noop


sweepDraw:
addi $18, $0, 201 #sweepDraw entirely uses memory, and state of reg 15
addi $19, $0, 220
j sweep
noop
noop
noop
noop
noop

sweep:
blt $19, $18, drawCall #will let us break out of the loop
noop
noop
noop
noop
noop
lw $1, 0($18)
lw $3, 1($18)
addi $18, $18, 2
bne $1, $0, sweep #if no arrow here, just keep sweeping
noop
noop
noop
noop
noop
bne $15, $0, setErase #if wanting to erase, then will set to erase instead
noop
noop
noop
noop
noop
j drawCall
noop
noop
noop
noop
noop

drawCall:
blt $18, $19, draw #if we made have a draw to location and not out of index, then draw
noop
noop
noop
noop
noop
jr $31
noop
noop
noop
noop
noop



setErase:
addi $1, $0, 0
j drawCall
noop
noop
noop
noop
noop



end: 
j end
noop
noop
noop
noop
noop
noop


moveArrows:
addi $18, $0, 199
addi $19, $0, 220 
addi $20, $0, 64000 #setting max arrow location
addi $20, $20, 64000
addi $20, $20,64000
addi $20, $20, 6400
j sweep2
noop
noop
noop
noop
noop

sweep2:
addi $18, $18, 2 #largely same as in sweepDraw but avoiding 2+ jals in loops
lw $1, 0($18)
lw $3, 1($18)
bne $1, $0, sweep2 #if no arrow here, just keep sweeping
noop
noop
noop
noop
noop
blt $20, $3, deleteArrow
noop
noop
noop
noop
noop
addi $3, $3, 1920
sw $3, 1($18)
j moveNext
noop
noop
noop
noop
noop


moveNext:
blt $18, $19, sweep2 
noop
noop
noop
noop
noop
jr $31
noop
noop
noop
noop
noop


deleteArrow:
sw $0, 0($18)
sw $0, 1($18)
j moveNext
noop
noop
noop
noop
noop


genArrows:
addi $20, $0, 400
addi $24, $0, 435 #max stored arrow for gen in memory addr.
j sweep3
noop
noop
noop
noop
noop

sweep3:
noop
noop
noop
noop
noop
blt $24, $20, finishGen #if past gen list
noop
noop
noop
noop
noop
lw $21, 0($20) #cycle count necessary to load
noop
noop
noop
noop
noop
lw $22, 1($20) #arrow type, if present
noop
noop
noop
noop
noop
lw $23, 2($20) #arrow bottom location, again, if present
noop
noop
noop
noop
noop
bne $22, $0, nextArrowGen #if no arrow here, will want next one
noop
noop
noop
noop
noop
blt $6, $21, nextArrowGen #if cycle count not at time to gen, then skip for now
noop #if we get here, then we are creating a new arrow
noop
noop
noop
noop
addi $18, $0, 199 #reset so to not leave empty memory places
noop
noop
noop
noop
noop
addi $19, $0, 241
j placeArrowInMemLoop
noop
noop
noop
noop
noop


placeArrowInMemLoop:
noop
noop
noop
noop
noop
addi $18, $18, 2 
noop
noop
noop
noop
noop
lw $25, 0($18)
noop
noop
noop
noop
noop
bne $25, $0, placeArrow #might want to add a limiter just in case later but all good for now hopefully
noop
noop
noop
noop
noop
j placeArrowInMemLoop #may want to insert out of bounds branch before this... 
noop
noop
noop
noop
noop


placeArrow:
noop
noop
noop
noop
noop
sw $22, 0($18) #place arrow type in active mem
noop
noop
noop
noop
noop
sw $23, 1($18) #place arrow loc in active mem
noop
noop
noop
noop
noop
sw $0, 0($20) #remove arrow in pregen list
noop
noop
noop
noop
noop
sw $0, 1($20) #remove arrow in pregen list
noop
noop
noop
noop
noop
sw $0, 2($20) #remove arrow in pregen list
j finishGen
noop
noop
noop
noop
noop


finishGen:
addi $21,$0,0
addi $22,$0,0
addi $23,$0,0
noop
noop
noop
noop
noop
jr $31 #if last arrow checked was gen'd
noop
noop
noop
noop
noop



nextArrowGen:
noop
noop
noop
noop
noop
addi $20, $20, 3
noop
noop
noop
noop
noop
j sweep3
noop
noop
noop
noop
noop








.data
wow: .word 0x0000B504
mystring: .string ASDASDASDASDASDASD
var: .char Z
label: .char A
heapsize: .word 0x00000000
myheap: .word 0x00000000
